n=300 #n is variable
      #300 we assigned value to variable
This is read or interpreted (a kind of program that executes other programs) as “n is assigned 
the value 300.” Once this is done, n can be used in a statement or expression, and its 
value will be substituted:
---------------------------------------------------------->>
---------------------------------------------------------->>
Later,we can change the value of n and use it again the new value will be submitted
n=1000 #n is variable
	#1000 WE assign value to variable
-------------------------------------------->>
Python also allows chained assignment, which makes it possible to assign the same value to 
several variables simultaneously:
a=b=c=300
print(a,b,c)
300 300 300
------------------------------------------------------>>
Variable Types in Python
In many programming languages, variables are statically typed. That means a variable is 
initially declared to have a specific data type, and any value assigned to it during its 
lifetime must always have that type.

Variables in Python are not subject to this restriction. In Python, a variable may be assigned 
a value of one type and then later re-assigned a value of a different type:
------------------------------------------------------->>
Variable Assignment:
To "assign" a variable means to symbolically associate a specific piece of information with a name. 
Any operations that are applied to this "name" (or variable) must hold true for any possible values. 
The assignment operator is the equals sign which SHOULD NEVER be used for equality, which is the double equals sign.
The '=' symbol is the assignment operator.

print(300)
300

When presented with the statement print(300), the interpreter does the following:

Creates an integer object
Gives it the value 300
Displays it to the console

You can see that an integer object is created using the built-in type() function:

>>> type(300)
<class 'int'>

A Python variable is a symbolic name that is a reference or pointer to an object. Once an object is assigned 
to a variable, you can refer to the object by that name. But the data itself is still contained within the 
object.

For example:

>>> n = 300
Ex1:
m=330
n=330
id(m)
2152930226576
id(n)
2152930226640
#above examples see id's it's different

Ex2:
m=30
n=30
id(m)
2152894432400
id(n)
2152894432400
#below examples id's are same
For purposes of optimization, the interpreter creates objects for the integers in the range [-5, 256] at 
startup, and then reuses them during program execution. Thus, when you assign separate variables to an 
integer value in this range, they will actually reference the same object.


